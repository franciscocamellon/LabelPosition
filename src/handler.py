# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LabelPosition
                                 A QGIS plugin
 This plugin rotate the label around a point feature
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-12
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Francisco CamelloN
        email                : franciscocamellon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtCore import QVariant
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.PyQt.Qt import QObject
from qgis.core import QgsProject, QgsWkbTypes, QgsField, QgsFields
from qgis.utils import *

from .gui import LabelPosition_dialog
from LabelPosition import LabelPosition


class Manager(QObject):

    def __init__(self, layer, iface=None):
        super().__init__()
        self.iface = iface
        

    def setQuadrantPos(self):
        # print(self.field_name)
        print('layer: ', self.lyr.name())
        print('selecionados: ', self.selected)
        print('numero selecionados: ', self.number_sel_feat)

        # if self.number_sel_feat > 0:
        #     self.layer.startEditing()
        #     for feature in self.selected:
        #         pos = feature['offset_quad']
        #         pos = 0 if not pos else int(pos)
        #         if pos < 8:
        #             pos += 1
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #         elif pos == 8:
        #             pos = 0
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #         else:
        #             pos = 0
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #     self.layer.commitChanges()
        # else:
        #     QMessageBox.critical(self.iface.mainWindow(), "Error",
        #                          "Please select at least one feature from rel_ponto_cotado_altimetrico_p layer!")

    def validate_field(self):

        for field in self.lyr.fields():
            if field.name() == self.field_name:
                return self.lyr

            else:
                self.dlg.show()
                result = self.dlg.exec_()
                print(result)
                # See if OK was pressed
                if result and self.dlg.virtual_check.isChecked():
                    QMessageBox.critical(
                        self.iface.mainWindow(), "Error", "field does not exists")
                return self.lyr
