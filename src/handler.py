# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LabelPosition
                                 A QGIS plugin
 This plugin rotate the label around a point feature
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-12
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Francisco CamelloN
        email                : franciscocamellon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtCore import QVariant
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject, QgsWkbTypes, QgsField, QgsFields
from qgis.utils import *


class Manager:

    def __init__(self, iface):
        self.iface = iface


    def setQuadrantPos(self):
        layer = self.iface.activeLayer()
        selected = layer.selectedFeatures()
        number_sel_feat = layer.selectedFeatureCount()
        field_name = 'offset_quad'
        self.validate_field(layer)

        # if self.number_sel_feat > 0:
        #     self.layer.startEditing()
        #     for feature in self.selected:
        #         pos = feature['offset_quad']
        #         pos = 0 if not pos else int(pos)
        #         if pos < 8:
        #             pos += 1
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #         elif pos == 8:
        #             pos = 0
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #         else:
        #             pos = 0
        #             self.layer.changeAttributeValue(feature.id(), 4, pos)
        #             self.layer.triggerRepaint()
        #     self.layer.commitChanges()
        # else:
        #     QMessageBox.critical(self.iface.mainWindow(), "Error",
        #                          "Please select at least one feature from rel_ponto_cotado_altimetrico_p layer!")

    def validate_field(self, layer):
        field_index = self.layer.fields().indexFromName(self.field_name)

        for field in layer.fields():
            try:
                if field == self.field_name:
                    QMessageBox.critical(self.iface.mainWindow(), "Error", "field exists")
            except KeyError:
                QMessageBox.critical(self.iface.mainWindow(), "Error", "field does not exists")
                break


""""
    def geomHandler(self):
        layer = iface.activeLayer()
        selection = layer.selectedFeatures()
        n_sel = layer.selectedFeatureCount()
        #features = layer.getFeatures()
        for feature in self.n_sel:
        # retrieve every feature with its geometry and attributes
        print("Feature ID: ", feature.id())
        # fetch geometry
        # show some information about the feature geometry
        geom = feature.geometry()
        geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
        if geom.type() == QgsWkbTypes.PointGeometry:
        # the geometry type can be of single or multi type
            if geomSingleType:
                x = geom.asPoint()
            pass
            elif:
                x = geom.asMultiPoint()
            print("MultiPoint: ", x)
        elif geom.type() == QgsWkbTypes.LineGeometry:
"""
